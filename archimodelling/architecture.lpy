from notebook_util import notebook
exec(notebook('Apple Tree Simulation - Organs.ipynb'))
exec(notebook('Apple Tree Simulation - Architecture.ipynb'))

from math import *
from openalea.plantgl.all import Revolution
from random import seed

seed(SEED)

import meteo

leafshape.ustride = 6
leafshape.vstride = 6

cdate = None
def initcdate():
  global cdate
  cdate = meteo.get_first_day_for_temperature()+timedelta(days=120)

initcdate()

def Start():
  initcdate()


def StartEach():
  global cdate
  if cdate.month == 12:
    useGroup(3)
  else:
    useGroup(0)
  if cdate.month in range(7,13)+range(1,4):
    deltatime = 30
  else:
    deltatime = 1
  cdate += timedelta(days=deltatime)


initial_view = 150

module Meristem
module Leaf
module Internode
module SimuInfo

branchingmatrixfate = normalize([
    [0.4,0.6,0],
    [0.3,0.7,0],
    [0.4,0.6,0],
    [0.7,0.3,0],
    [0.4,0.25,0.35],
    [0.4,0.25,0.35],
    [0.35,0.2,0.45],
    [0.35,0.3,0.35],
    [0.3,0.55,0.15],
    [0.65,0.35,0]
])


def init_meristem(gufate, gutype, parentdate = None, parentlength = None):
  if parentdate is None:
    init_date = date(cdate.year, 4, 1)
  elif gufate == Sylleptic:
    init_date = cdate
  else:
    init_date = date(parentdate.year+1, 4, 1)
  assert gutype in [ShortGU, LongGU, Inflo, TrunkGU]
  nbmetamer = growth_unit_length(gutype, parentlength)
  p = ParameterSet(gutype = gutype,
                   gufate = gufate,
                   mp = MetamerProduction(metamerprodrate, nbmetamer),
                   init_date = init_date,
                   processed_date = init_date - timedelta(days=1))
  return p


Axiom:
  nproduce  Meristem(init_meristem(Proleptic,TrunkGU))
  produce SimuInfo

derivation length: 600
production:
group 0:

Meristem(p):
  if p.processed_date < cdate:
    p.processed_date = cdate
    previousnbmetamer = p.mp.nbmetamer
    nbnewmetamer = p.mp.accumulate_range(p.init_date, cdate)
    for i in xrange(nbnewmetamer):
      rank =  previousnbmetamer+i
      normalizedrank = rank / p.mp.nbfinalmetamer
      nproduce Internode(ParameterSet(length=0.01, finallength = internode_length(rank = rank), width=0.01, ttime = 0, nbchildren = 1))
      nproduce   /(144) [  &(60) Leaf(ParameterSet(area=0, finalarea = leaf_area(rank = rank), ttime = 0)) ]
      ramiffate, ramiftype = branching(p.gutype, normalizedrank, branchingmatrixtype =branchingmatrixtype)
      if ramiffate == Sylleptic and (cdate.year >= 2011 or p.gufate == Sylleptic):
        ramiffate = Proleptic
      if ramiffate != Blind:
        nproduce [ &(30) @Tp(0,0,-1) @Ts(0.01) Meristem(init_meristem(ramiffate, ramiftype, p.init_date, p.mp.nbfinalmetamer)) ]
    
    if p.mp.nbmetamer < p.mp.nbfinalmetamer:
      # meristem need to still generate metamer
      nproduce Meristem(p)
    else:
      # succession
      if p.gutype == Inflo:
        # to be completed
        # generate a lateral sylleptic GU
        # generate a flower
      else:
        # succession
        if p.gutype == TrunkGU:
          nproduce @Tp(0,0,-1) @Ts(0.005)
        
        produce Meristem(init_meristem(Proleptic, succession(p.gutype), p.init_date, p.mp.nbfinalmetamer))
  

Internode(p) :
  cttime = mthermaltime.get_effective_temperature(cdate)
  p.ttime += cttime
  
  p.length += growth_rate(p.ttime, p.finallength, tip_internode, b_internode)*cttime
  p.width += growth_rate(p.ttime, InternodeRadius, tip_internode, b_internode)*cttime
  
  produce Internode(p)

Leaf(p):
  cttime = mthermaltime.get_effective_temperature(cdate)
  p.ttime += cttime
  
  p.area += growth_rate(p.ttime, p.finalarea, tip_leaf, b_leaf)*cttime
  
  produce Leaf(p)


Flower(t):
  if t < 30: produce Flower(t+1)
  else : produce Fruit

group 3:

Leaf(p) --> %

Fruit --> %

interpretation:
group 0:

Internode(p) --> _(p.width) F(p.length)

Leaf(p) :
  if p.area > 0:
    width = sqrt(p.area / 1.4)
    length = 2 * width
    produce ,(10) @g(leafshape, length) #SetContour(leafsection) TextureVScale(1./length) _(width/2) F(length)


Flower(t) :
  nproduce [ F(3) ,(11) &(90) TextureScale(1) @o(3)]

Fruit :
  nproduce [ @v @h &(90) @Tp(0,0,-1) @Ts(0.1) ,(2) _(0.05) nF(1,0.1)  ,(3) f(1.5) @g(Revolution(applesection),3) ]

SimuInfo:
  produce [@2D @M(0.7,0.8) @L(str(cdate), 20)]

endlsystem
###### INITIALISATION ######

__lpy_code_version__ = 1.1

def __initialiseContext__(context):
	import openalea.plantgl.all as pgl
	Color_10 = pgl.Material("Color_10" , ambient = (30,60,10) , diffuse = 3 , )
	Color_10.name = "Color_10"
	context.turtle.setMaterial(10,Color_10)
	Color_11 = pgl.Material("Color_11" , ambient = (60,60,15) , diffuse = 3 , )
	Color_11.name = "Color_11"
	context.turtle.setMaterial(11,Color_11)
	scalars = [('SEED', 'Integer', 0, 0, 100)]
	context["__scalars__"] = scalars
	for s in scalars:
		if not s[1] == "Category" : context[s[0]] = s[2]
	import openalea.plantgl.all as pgl
	leafsection = pgl.Polyline2D(	
	    pgl.Point2Array([(-1.01037, 0.524751),(-0.0030303, -0.00517379),(1.01037, 0.503186)]) , 
	    )
	leafsection.name = "leafsection"
	applesection = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(-0.000874121, -0.389685, 1),(0.0162006, -0.606468, 1),(0.629545, -0.424825, 1),(0.712296, 0.0104895, 1),(0.645105, 0.516783, 1),(-0.00961528, 0.627098, 1),(-0.0171328, 0.394231, 1)]) , 
	    )
	applesection.name = "applesection"
	import openalea.plantgl.all as pgl
	leafshape = pgl.NurbsPatch(	
	    pgl.Point4Matrix([[(-0.0241355, -0.00107318, -0.00804807, 1), (-0.00877065, -0.00933309, 0.00100194, 1), (0.0221632, -0.00738144, -0.011382, 1), (-0.00223729, -0.00247516, 0.000385988, 1)], [(0.314084, -0.472921, 0.392759, 1), (0.000957513, 0.000400347, 0.33376, 1), (-0.00092555, 0.00517653, 0.332921, 1), (0.408856, 0.483731, 0.413612, 1)], [(0.329337, -0.501345, 0.730665, 1), (0.000326354, 0.0164005, 0.665257, 1), (-0.000118909, 0.019707, 0.66817, 1), (0.414001, 0.558038, 0.74373, 1)], [(0.00223079, 0.0223592, 0.999352, 1), (0.00112035, 0.028812, 1.0005, 1), (-0.000767699, 0.0327184, 0.999658, 1), (-0.0011293, 0.0361733, 1.00279, 1)]]) , 
	    )
	leafshape.name = "leafshape"
	panel_0 = ({'name': 'Panel 1', 'active': True, 'visible': True},[('Curve2D',leafsection),('Curve2D',applesection),('NurbsPatch',leafshape)])
	parameterset = [panel_0,]
	context["__functions__"] = []
	context["__curves__"] = [('leafsection',leafsection),('applesection',applesection),]
	context["__parameterset__"] = parameterset
	context["leafsection"] = leafsection
	context["applesection"] = applesection
	context["leafshape"] = leafshape
