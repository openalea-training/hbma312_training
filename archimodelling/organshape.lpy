from math import sqrt

module Leaf
module Internode

Axiom:  Internode(ParameterSet(length = 2, width=0.1)) [&(60) Leaf(ParameterSet(area = 35,ttime = 0)) ]

derivation length: 1
production:

interpretation:
group 0:

Internode(p) --> _(p.width) F(p.length)

Leaf(p) :
  if p.area > 0:
    length = sqrt(p.area / 1.4)
    produce ,(2) @g(leafshape)

endlsystem
###### INITIALISATION ######

__lpy_code_version__ = 1.1

def __initialiseContext__(context):
	import openalea.plantgl.all as pgl
	leafshape = pgl.NurbsPatch(	
	    pgl.Point4Matrix([[(-0.0241355, -0.00107318, -0.00804807, 1), (-0.00877065, -0.00933309, 0.00100194, 1), (0.0221632, -0.00738144, -0.011382, 1), (-0.00223729, -0.00247516, 0.000385988, 1)], [(0.314084, -0.472921, 0.392759, 1), (0.000957513, 0.000400347, 0.33376, 1), (-0.00092555, 0.00517653, 0.332921, 1), (0.408856, 0.483731, 0.413612, 1)], [(0.329337, -0.501345, 0.730665, 1), (0.000326354, 0.0164005, 0.665257, 1), (-0.000118909, 0.019707, 0.66817, 1), (0.414001, 0.558038, 0.74373, 1)], [(0.00223079, 0.0223592, 0.999352, 1), (0.00112035, 0.028812, 1.0005, 1), (-0.000767699, 0.0327184, 0.999658, 1), (-0.0011293, 0.0361733, 1.00279, 1)]]) , 
	    )
	leafshape.name = "leafshape"
	panel_0 = ({'name': 'Panel 1', 'active': True, 'visible': True},[('NurbsPatch',leafshape)])
	parameterset = [panel_0,]
	context["__functions__"] = []
	context["__curves__"] = []
	context["__parameterset__"] = parameterset
	context["leafshape"] = leafshape
