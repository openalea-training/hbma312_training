from notebook_util import notebook
exec(notebook('Apple Tree Simulation - Organs.ipynb'))

import meteo
from math import *

leafshape.ustride = 6
leafshape.vstride = 6

cdate = None
def initcdate():
  global cdate
  cdate = meteo.get_first_day_for_temperature()+timedelta(days=120)

initcdate()

def Start():
  initcdate()


def StartEach():
  global cdate
  cdate += timedelta(days=1)

module Meristem
module Leaf
module Internode


Axiom:
  nbmetamer = growth_unit_length(TrunkGU)
  produce Meristem(MetamerProduction(metamerprodrate, nbmetamer))

derivation length: 100
production:

Meristem(p):
  # Retrieve current nb of metamers produce by the meristem (p.metamer)
  # accumulate the temperature and retrieve the nb of new metamers to produce
  previousnbmetamer = p.nbmetamer
  nbnewmetamer = p.accumulate(cdate)
  for i in range(nbnewmetamer):
    #    produce an Internode whose finallength is given by the internode_length function, length and width and ttime set to 0
    #    produce symbol for phyllotaxy (144 for the apple tree)
    #    produce lateraly (with a branching angle of 60) a leaf whose finalarea is given by function leaf_area, and area and width and ttime set to 0
    pass
  produce Meristem(p)


Internode(p) :
  cttime = mthermaltime.get_effective_temperature(cdate)
  
  p.length += growth_rate(p.ttime, p.finallength, tip_internode, b_internode)*cttime
  p.width += growth_rate(p.ttime, InternodeRadius, tip_internode, b_internode)*cttime
  p.ttime += cttime
  
  produce Internode(p)

Leaf(p):
  cttime = mthermaltime.get_effective_temperature(cdate)
  
  p.area += growth_rate(p.ttime, p.finalarea, tip_leaf, b_leaf)*cttime
  p.ttime += cttime
  
  produce Leaf(p)

interpretation:

Internode(p) --> _(p.width) F(p.length)

Leaf(p) :
  if p.area > 0:
    width = sqrt(p.area / 1.4)
    length = 2 * width
    produce ,(10) @g(leafshape, length) #SetContour(leafsection) TextureVScale(1./length) _(width/2) F(length)


Flower(t) :
  nproduce [ F(3) ,(11) &(90) TextureScale(1) @o(5)]

Fruit :
  nproduce [ @v @h &(90) @Tp(0,0,-1) @Ts(0.1) ,(2) _(0.05) nF(1,0.1)  ,(3) f(1.5) @g(Revolution(applesection),3) ]

endlsystem
###### INITIALISATION ######

__lpy_code_version__ = 1.1

def __initialiseContext__(context):
	import openalea.plantgl.all as pgl
	Color_10 = pgl.Material("Color_10" , ambient = (30,60,10) , diffuse = 3 , )
	Color_10.name = "Color_10"
	context.turtle.setMaterial(10,Color_10)
	Color_11 = pgl.Material("Color_11" , ambient = (60,60,15) , diffuse = 3 , )
	Color_11.name = "Color_11"
	context.turtle.setMaterial(11,Color_11)
	import openalea.plantgl.all as pgl
	leafsection = pgl.Polyline2D(	
	    pgl.Point2Array([(-1.01037, 0.524751),(-0.0030303, -0.00517379),(1.01037, 0.503186)]) , 
	    )
	leafsection.name = "leafsection"
	applesection = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(-0.000874121, -0.389685, 1),(0.0162006, -0.606468, 1),(0.629545, -0.424825, 1),(0.712296, 0.0104895, 1),(0.645105, 0.516783, 1),(-0.00961528, 0.627098, 1),(-0.0171328, 0.394231, 1)]) , 
	    )
	applesection.name = "applesection"
	import openalea.plantgl.all as pgl
	leafshape = pgl.NurbsPatch(	
	    pgl.Point4Matrix([[(-0.0241355, -0.00107318, -0.00804807, 1), (-0.00877065, -0.00933309, 0.00100194, 1), (0.0221632, -0.00738144, -0.011382, 1), (-0.00223729, -0.00247516, 0.000385988, 1)], [(0.314084, -0.472921, 0.392759, 1), (0.000957513, 0.000400347, 0.33376, 1), (-0.00092555, 0.00517653, 0.332921, 1), (0.408856, 0.483731, 0.413612, 1)], [(0.329337, -0.501345, 0.730665, 1), (0.000326354, 0.0164005, 0.665257, 1), (-0.000118909, 0.019707, 0.66817, 1), (0.414001, 0.558038, 0.74373, 1)], [(0.00223079, 0.0223592, 0.999352, 1), (0.00112035, 0.028812, 1.0005, 1), (-0.000767699, 0.0327184, 0.999658, 1), (-0.0011293, 0.0361733, 1.00279, 1)]]) , 
	    )
	leafshape.name = "leafshape"
	panel_0 = ({'name': 'Panel 1', 'active': True, 'visible': True},[('Curve2D',leafsection),('Curve2D',applesection),('NurbsPatch',leafshape)])
	parameterset = [panel_0,]
	context["__functions__"] = []
	context["__curves__"] = [('leafsection',leafsection),('applesection',applesection),]
	context["__parameterset__"] = parameterset
	context["leafsection"] = leafsection
	context["applesection"] = applesection
	context["leafshape"] = leafshape
