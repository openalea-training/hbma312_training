### Initialization code
from notebook_util import notebook
exec(notebook('Apple Tree Simulation - Organs.ipynb'))
exec(notebook('Apple Tree Simulation - Architecture.ipynb'))
leafshape.ustride = 6
leafshape.vstride = 6

from math import *
from openalea.plantgl.all import Revolution
import meteo

from random import seed
seed(SEED)
from numpy.random import seed
seed(SEED)

# Parameters

extern(BRANCH_ELASTICITY=0.01)
extern(INTERNODE_FLENGTH=3.5)

#Scheduling

cdate = None
prevdate = None
def initcdate():
  global cdate, prevdate
  cdate = meteo.get_first_day_for_temperature()+timedelta(days=120)
  prevdate = cdate-timedelta(days=1)

initcdate()

def Start():
  initcdate()

totalleafarea = 0
totalleafnb = 0
totalfruitnb = 0

def increment_date(timestep = 1):
    global cdate, prevdate
    mrange = list(range(9,13))+list(range(1,4))
    if not FULLPLANT and cdate.year == 2010:
      mrange += range(7,9)
    if cdate.month in mrange:
      deltatime = max(timestep,30)
    else:
      deltatime = timestep
    prevdate = cdate
    cdate += timedelta(days=deltatime)

def StartEach():
  global cdate, prevdate, totalleafarea, totalleafnb
  totalleafarea, totalleafnb = 0, 0
  if cdate.year == 2011 and cdate.month >= 6:
    if getIterationNb() % 2 == 0:
      useGroup(4)
      totaldemand, totalsupply = 0, 0
      for c in allcarbonpools:
        totaldemand += c.demand
        totalsupply += c.supply
        # c.photosynthesis = c.demand / max(c.supply,0.05)
      photosynthesis_ratio = totaldemand /  totalsupply
      for c in allcarbonpools:
        c.photosynthesis_ratio = photosynthesis_ratio
    else:
      useGroup(0)
      for c in allcarbonpools:
        #c.demand = 0
        c.supply = 0
      increment_date(GROWTHDELAY)
      
  else:
    if cdate.month == 12:
      useGroup(3)
    else:
      useGroup(0) #(2 if getIterationNb() % 3 == 0 else 0)
    increment_date()
    
    


def EndEach():
  if cdate.year == 2011 and cdate.month == 9:
    Stop()

initial_view = 1

branchingmatrixtype = normalize([
    [0.5,0.5,0],
    [0.5,0.5,0],
    [0.75,0.25,0],
    [1,0,0.5],
    [1,0,0.5],
    [0.5,0.5,0.75],
    [0.25,0,1],
    [0.15,0.35,0.75],
    [0.15,0.7,0.5],
    [0.4,0.6,0]
])

successionmatrix = [[0.6,  0.0,  0.4],
                    [0.35, 0.25, 0.4],
                    [0.5, 0.5,  0]
                   ]

module Meristem
module Leaf
module Internode
module SimuInfo
module Fruit

def init_meristem(gufate, gutype, parentdate = None, parentlength = None):
  if parentdate is None:
    init_date = date(cdate.year, 4, 1)
  elif gufate == Sylleptic:
    init_date = cdate
  else:
    init_date = date(parentdate.year+1, 4, 1)
  assert gutype in [ShortGU, LongGU, Inflo, TrunkGU]
  nbmetamer = growth_unit_length(gutype, parentlength)
  p = ParameterSet(gutype = gutype,
                   gufate = gufate,
                   mp = MetamerProduction(metamerprodrate, nbmetamer),
                   init_date = init_date,
                   zonepool = None)
  return p


allcarbonpools = []

def init_carbon(order, parentpool = None):
  global allcarbonpools, gpool
  if order <= POOLORDER or parentpool is None:
    p =  ParameterSet(supply=0, demand=0, colorid = len(allcarbonpools))
    allcarbonpools.append(p)
    return p
  else:
    return parentpool

radiusexponent = 0.27


Axiom:
  trunkc = init_carbon(0)
  if FULLPLANT:
    nproduce  Meristem(0, init_meristem(Proleptic, TrunkGU), trunkc)
  else:
    for i in range(20):
        nproduce Internode(ParameterSet(length=INTERNODE_FLENGTH, finallength = INTERNODE_FLENGTH, width=0.5, ttime = 1000), trunkc)
    nproduce [ &(INSERTION_ANGLE) @Tp(0,0,-1) @Ts(BRANCH_ELASTICITY) Meristem(1, init_meristem(Sylleptic, LongGU, cdate, 30), init_carbon(1,trunkc)) ] 
    for i in range(2):
        nproduce Internode(ParameterSet(length=INTERNODE_FLENGTH, finallength = INTERNODE_FLENGTH, width=0.5, ttime = 1000), trunkc)
    nproduce /(PHYLLOTAXY)[ &(INSERTION_ANGLE) @Tp(0,0,-1) @Ts(BRANCH_ELASTICITY) Meristem(1, init_meristem(Sylleptic, LongGU, cdate, 30), init_carbon(1,trunkc)) ]
    for i in range(8):
      nproduce Internode(ParameterSet(length=INTERNODE_FLENGTH, finallength = INTERNODE_FLENGTH, width=0.5, ttime = 1000), trunkc)
  produce SimuInfo

derivation length: 1000
production:
group 0:

Meristem(o, p, c):
  if p.init_date <= cdate:
    previousnbmetamer = p.mp.nbmetamer
    nbnewmetamer = p.mp.accumulate_range(p.init_date, cdate)
    for i in range(nbnewmetamer):
      rank =  previousnbmetamer+i
      normalizedrank = rank / p.mp.nbfinalmetamer
      nproduce Internode(ParameterSet(length=0.01, finallength = internode_length(rank = rank, maxlength=INTERNODE_FLENGTH), width=0.01, ttime = 0), c)
      nproduce   /(PHYLLOTAXY) [  &(60) Leaf(ParameterSet(area=0, finalarea = leaf_area(rank = rank), width=0.1, ttime = 0), c) ]
      ramiffate, ramiftype = branching(p.gutype, normalizedrank, branchingmatrixtype =branchingmatrixtype)
      if ramiffate == Sylleptic and (cdate.year >= 2011 or p.gufate == Sylleptic):
        ramiffate = Proleptic
      if ramiffate != Blind:
        if ZONEPOOL and p.zonepool != None:
          nc = p.zonepool
        else:
          nc =  init_carbon(o+1, c)
          p.zonepool = nc
        nproduce [ &(INSERTION_ANGLE) @Tp(0,0,-1) @Ts(BRANCH_ELASTICITY) Meristem(o+1, init_meristem(ramiffate, ramiftype, p.init_date, p.mp.nbfinalmetamer),nc) ]
      else:
         p.zonepool = None
    
    if p.mp.nbmetamer < p.mp.nbfinalmetamer:
      nproduce Meristem(o, p, c)
    else:
      # succession
      if p.gutype == Inflo:
        nproduce [ &(INSERTION_ANGLE/2) Meristem(o, init_meristem(Sylleptic, succession(p.gutype, successionmatrix), p.init_date, 50), c) ]
        produce Flower(0, c)
      else:
        # succession
        if p.gutype == TrunkGU:
          nproduce @Tp(0,0,-1) @Ts(BRANCH_ELASTICITY/2)
        
        produce Meristem(o, init_meristem(Proleptic, succession(p.gutype, successionmatrix), p.init_date, p.mp.nbfinalmetamer), c)
          
  
production:

group 2:
consider: Internode, Meristem
Internode(p) >> []  x([Internode(pb)]) x([Meristem(pm)]) x(Internode(pa),1) :
  p.nbchildren = sum([pi.nbchildren for pi in pb])+sum([pi.nbchildren for pi in pa])+1
  
  cttime = mthermaltime.get_effective_temperature(cdate)
  p.ttime += cttime
  
  p.length = growth_logistic(p.ttime, p.finallength, tip_internode, b_internode)
    
  width = InternodeRadius * pow(p.nbchildren, radiusexponent)
  p.width = growth_logistic(p.ttime, width, tip_internode, b_internode)
  
  produce Internode(p)

group 0:
Internode(p, c) :
  cttime = mthermaltime.get_effective_temperatures(prevdate, cdate)
  p.ttime += sum(cttime)
  
  p.length = growth_logistic(p.ttime, p.finallength, tip_internode, b_internode)
  p.width = growth_logistic(p.ttime, InternodeRadius, tip_internode, b_internode)
  
  produce Internode(p, c)




Leaf(p, c):
  global totalleafarea, totalleafnb
  cttime = mthermaltime.get_effective_temperatures(prevdate, cdate)
  p.ttime += sum(cttime)
  
  p.area = growth_logistic(p.ttime, p.finalarea, tip_leaf, b_leaf)
  totalleafarea += p.area
  totalleafnb += 1
  
  c.supply += p.area
  
  produce Leaf(p, c)


Flower(t, c):
  if cdate.year == 2011 and cdate.month == 6 and cdate.day == 1: 
      global totalfruitnb
      totalfruitnb += 1
      produce Fruit(ParameterSet(size = 0.1, potentialsize = 0.1, ttime = 0, demand =0, fruitid = totalfruitnb), c)
  else : 
    produce Flower(t+1, c)

Fruit(p,c):
  cttime = sum(mthermaltime.get_effective_temperatures(prevdate, cdate))
  p.ttime += cttime
  previouspot = p.potentialsize  
  p.potentialsize = growth_logistic(p.ttime, 8, 550, 200.)
  daydemand = p.potentialsize - previouspot
  p.demand += daydemand
  c.demand += daydemand
  produce Fruit(p,c)

group 4:
Fruit(p,c):
  gusupply = c.supply * c.photosynthesis_ratio
  if gusupply < c.demand:
    p.size += gusupply* p.demand/c.demand
  else:
    p.size += p.demand
  p.demand = 0
  produce Fruit(p,c)

Leaf(p, c):
  global totalleafarea, totalleafnb
  totalleafarea += p.area
  totalleafnb += 1
  produce Leaf(p, c)

group 3:

Leaf(p, c) --> %

Fruit(c) --> %

interpretation:
group 0:

Internode(p, c) --> _(p.width) F(p.length)

Leaf(p, c) :
  if p.area > 0:
    width = sqrt(p.area / 1.4)
    length = 2 * width
    color = (c.colorid % 20)
    if color % 2 == 0:
      color = 20-color
    produce ,(20+color)   @g(leafshape, length) # SetContour(leafsection) TextureVScale(1./length) _(width/2) F(length)


Flower(t) --> [ F(3) ,(10) ,(4) _(0.001) F(3*cos(pi*(t/60.)),3*sin(pi*(t/60.)))  ]

Fruit(p, c) :
  color = (c.colorid % 20)
  if color % 2 == 0:
      color = 20-color
  nproduce [ @v @h &(90) @Tp(0,0,-1) @Ts(0.1) ,(2) _(0.05) nF(1,0.1)  ,(3) f(p.size/2) @g(Revolution(applesection),p.size) 
  nproduce [,(20+color) @M(p.fruitid*10,0,0) @R(0,0,1, 1,0,0) _(5)f(p.size/2) | @g(Revolution(applesection),p.size) |
  nproduce f(10) Label('%.0f' % (p.size*60), 20) ] ]

SimuInfo:
  produce [@2D @M(0,0.8) @L(str(cdate), 20)]

endlsystem
###### INITIALISATION ######

__lpy_code_version__ = 1.1

def __initialiseContext__(context):
	import openalea.plantgl.all as pgl
	Color_10 = pgl.Material("Color_10" , ambient = (30,60,10) , diffuse = 3 , )
	Color_10.name = "Color_10"
	context.turtle.setMaterial(10,Color_10)
	Color_11 = pgl.Material("Color_11" , ambient = (60,60,15) , diffuse = 3 , )
	Color_11.name = "Color_11"
	context.turtle.setMaterial(11,Color_11)
	Color_20 = pgl.Material("Color_20" , ambient = (11,0,80) , )
	Color_20.name = "Color_20"
	context.turtle.setMaterial(20,Color_20)
	Color_21 = pgl.Material("Color_21" , ambient = (0,7,78) , diffuse = 2.03881 , )
	Color_21.name = "Color_21"
	context.turtle.setMaterial(21,Color_21)
	Color_22 = pgl.Material("Color_22" , ambient = (0,24,77) , diffuse = 2.07761 , )
	Color_22.name = "Color_22"
	context.turtle.setMaterial(22,Color_22)
	Color_23 = pgl.Material("Color_23" , ambient = (0,41,76) , diffuse = 2.11642 , )
	Color_23.name = "Color_23"
	context.turtle.setMaterial(23,Color_23)
	Color_24 = pgl.Material("Color_24" , ambient = (0,57,74) , diffuse = 2.15522 , )
	Color_24.name = "Color_24"
	context.turtle.setMaterial(24,Color_24)
	Color_25 = pgl.Material("Color_25" , ambient = (0,72,73) , diffuse = 2.19403 , )
	Color_25.name = "Color_25"
	context.turtle.setMaterial(25,Color_25)
	Color_26 = pgl.Material("Color_26" , ambient = (0,72,56) , diffuse = 2.23284 , )
	Color_26.name = "Color_26"
	context.turtle.setMaterial(26,Color_26)
	Color_27 = pgl.Material("Color_27" , ambient = (0,70,39) , diffuse = 2.27164 , )
	Color_27.name = "Color_27"
	context.turtle.setMaterial(27,Color_27)
	Color_28 = pgl.Material("Color_28" , ambient = (0,69,23) , diffuse = 2.31045 , )
	Color_28.name = "Color_28"
	context.turtle.setMaterial(28,Color_28)
	Color_29 = pgl.Material("Color_29" , ambient = (0,68,7) , diffuse = 2.34925 , )
	Color_29.name = "Color_29"
	context.turtle.setMaterial(29,Color_29)
	Color_30 = pgl.Material("Color_30" , ambient = (9,67,1) , diffuse = 2.38806 , )
	Color_30.name = "Color_30"
	context.turtle.setMaterial(30,Color_30)
	Color_31 = pgl.Material("Color_31" , ambient = (27,66,0) , diffuse = 2.44925 , )
	Color_31.name = "Color_31"
	context.turtle.setMaterial(31,Color_31)
	Color_32 = pgl.Material("Color_32" , ambient = (45,65,0) , diffuse = 2.51045 , )
	Color_32.name = "Color_32"
	context.turtle.setMaterial(32,Color_32)
	Color_33 = pgl.Material("Color_33" , ambient = (63,64,0) , diffuse = 2.57164 , )
	Color_33.name = "Color_33"
	context.turtle.setMaterial(33,Color_33)
	Color_34 = pgl.Material("Color_34" , ambient = (64,46,0) , diffuse = 2.63284 , )
	Color_34.name = "Color_34"
	context.turtle.setMaterial(34,Color_34)
	Color_35 = pgl.Material("Color_35" , ambient = (63,28,0) , diffuse = 2.69403 , )
	Color_35.name = "Color_35"
	context.turtle.setMaterial(35,Color_35)
	Color_36 = pgl.Material("Color_36" , ambient = (62,9,0) , diffuse = 2.75522 , )
	Color_36.name = "Color_36"
	context.turtle.setMaterial(36,Color_36)
	Color_37 = pgl.Material("Color_37" , ambient = (62,0,8) , diffuse = 2.81642 , )
	Color_37.name = "Color_37"
	context.turtle.setMaterial(37,Color_37)
	Color_38 = pgl.Material("Color_38" , ambient = (61,0,26) , diffuse = 2.87761 , )
	Color_38.name = "Color_38"
	context.turtle.setMaterial(38,Color_38)
	Color_39 = pgl.Material("Color_39" , ambient = (60,0,43) , diffuse = 2.93881 , )
	Color_39.name = "Color_39"
	context.turtle.setMaterial(39,Color_39)
	Color_40 = pgl.Material("Color_40" , ambient = (60,0,60) , diffuse = 3 , )
	Color_40.name = "Color_40"
	context.turtle.setMaterial(40,Color_40)
	scalars = [('SEED', 'Integer', 63, 0, 100), ('INSERTION_ANGLE', 'Integer', 45, 0, 90), ('PHYLLOTAXY', 'Integer', 144, 0, 359), ('TIMESTEP', 'Integer', 1, 1, 100), ('ZONEPOOL', 'Bool', False), ('FULLPLANT', 'Bool', False), ('GROWTHDELAY', 'Integer', 5, 1, 20), ('POOLORDER', 'Integer', 2, 0, 2)]
	context["__scalars__"] = scalars
	for s in scalars:
		if not s[1] == "Category" : context[s[0]] = s[2]
	import openalea.plantgl.all as pgl
	leafsection = pgl.Polyline2D(	
	    pgl.Point2Array([(-1.01037, 0.524751),(-0.0030303, -0.00517379),(1.01037, 0.503186)]) , 
	    )
	leafsection.name = "leafsection"
	applesection = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(-0.000874121, -0.389685, 1),(0.0162006, -0.606468, 1),(0.629545, -0.424825, 1),(0.712296, 0.0104895, 1),(0.645105, 0.516783, 1),(-0.00961528, 0.627098, 1),(-0.0171328, 0.394231, 1)]) , 
	    )
	applesection.name = "applesection"
	import openalea.plantgl.all as pgl
	longproba = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(0, 0.0363636, 1),(0.151515, 0.477273, 1),(0.416667, 0.0454545, 1),(0.543182, 0.104545, 1),(0.788636, 0.440909, 1),(1, 0, 1)]) , 
	    )
	longproba.name = "longproba"
	shortproba = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(0, 0.05, 1),(0.515152, 0.536364, 1),(0.60303, 0.431818, 1),(1, 0.0318182, 1)]) , 
	    )
	shortproba.name = "shortproba"
	import openalea.plantgl.all as pgl
	leafshape = pgl.NurbsPatch(	
	    pgl.Point4Matrix([[(-0.0241355, -0.0549754, -0.00804807, 1), (-0.00877065, -0.00933309, 0.00100194, 1), (0.0221632, 0.0405477, -0.00898557, 1), (-0.00223729, -0.00247516, 0.000385988, 1)], [(0.314084, -0.472921, 0.392759, 1), (0.000957513, 0.000400347, 0.33376, 1), (-0.00092555, 0.00517653, 0.332921, 1), (0.408856, 0.483731, 0.413612, 1)], [(0.329337, -0.501345, 0.730665, 1), (0.000326354, 0.0164005, 0.665257, 1), (-0.000118909, 0.019707, 0.66817, 1), (0.414001, 0.558038, 0.74373, 1)], [(0.00223079, 0.0223592, 0.999352, 1), (0.00112035, 0.028812, 1.0005, 1), (-0.000767699, 0.0327184, 0.999658, 1), (-0.0011293, 0.0361733, 1.00279, 1)]]) , 
	    )
	leafshape.name = "leafshape"
	panel_0 = ({'name': 'Panel 1', 'active': True, 'visible': False},[('Curve2D',leafsection),('Curve2D',applesection),('Function',longproba),('Function',shortproba),('NurbsPatch',leafshape)])
	parameterset = [panel_0,]
	context["__functions__"] = [('longproba',longproba),('shortproba',shortproba),]
	context["__curves__"] = [('leafsection',leafsection),('applesection',applesection),]
	context["__parameterset__"] = parameterset
	context["leafsection"] = leafsection
	context["applesection"] = applesection
	context["longproba"] = pgl.QuantisedFunction(longproba)
	context["shortproba"] = pgl.QuantisedFunction(shortproba)
	context["leafshape"] = leafshape
