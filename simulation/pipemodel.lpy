from notebook_util import notebook
exec(notebook('Apple Tree Simulation - Organs.ipynb'))
exec(notebook('Apple Tree Simulation - Architecture.ipynb'))

from math import *
from random import seed
from openalea.plantgl.all import Revolution

leafshape.ustride = 6
leafshape.vstride = 6

seed(SEED)

import meteo

cdate = None
def initcdate():
  global cdate
  cdate = meteo.get_first_day_for_temperature()+timedelta(days=120)

initcdate()

def Start():
  initcdate()


def StartEach(lstring):
  backward()
  global cdate
  if cdate.month == 12:
    useGroup(3)
  else:
    useGroup(2 if getIterationNb() % 3 == 0 else 0)
  if cdate.month in list(range(11,13))+list(range(1,4)):
    deltatime = 10
  else:
    deltatime = 1
  cdate += timedelta(days=deltatime)


initial_view = 150

module Meristem
module Leaf
module Internode
module SimuInfo
module Flower
module Fruit

def init_meristem(gufate, gutype, parentdate = None, parentlength = None):
  if parentdate is None:
    init_date = date(cdate.year, 4, 1)
  elif gufate == Sylleptic:
    init_date = cdate
  else:
    init_date = date(parentdate.year+1, 4, 1)
  assert gutype in [ShortGU, LongGU, Inflo, TrunkGU]
  nbmetamer = growth_unit_length(gutype, parentlength)
  p = ParameterSet(gutype = gutype,
                   gufate = gufate,
                   mp = MetamerProduction(metamerprodrate, nbmetamer),
                   init_date = init_date,
                   processed_date = init_date - timedelta(days=1))
  return p


radiusconstant = 0.25
radiusexponent = 0.27

Axiom:
  nproduce  Meristem(init_meristem(Proleptic,TrunkGU))
  produce SimuInfo

derivation length: 200
production:
group 0:

Meristem(p):
  if p.init_date <= cdate:
    previousnbmetamer = p.mp.nbmetamer
    nbnewmetamer = p.mp.accumulate(cdate)
    for i in range(nbnewmetamer):
      rank =  previousnbmetamer+i
      normalizedrank = rank / p.mp.nbfinalmetamer
      nproduce Internode(ParameterSet(length=0.01, finallength = internode_length(rank = rank), width=radiusconstant, ttime = 0, nbchildren = 1))
      nproduce /(144) [  &(60) Leaf(ParameterSet(area=0, finalarea = leaf_area(rank = rank), ttime = 0)) ]
      ramiffate, ramiftype = branching(p.gutype, normalizedrank)
      if ramiffate == Sylleptic and (cdate.year >= 2011 or p.gufate == Sylleptic):
        ramiffate = Proleptic
      if ramiftype != Blind:
        nproduce [ &(30) @Tp(0,0,-1) @Ts(0.01) Meristem(init_meristem(ramiftype, p.init_date)) ]
    
    if p.mp.nbmetamer < p.mp.nbfinalmetamer:
      nproduce Meristem(p)
    else:
      if p.gutype == Inflo:
        nproduce [ &(15) Meristem(init_meristem(set_sylleptic(succession(p.gutype)), p.init_date)) ]
        produce Flower(0)
      else:
        nextgu = succession(p.gutype)
        # succession
        produce Meristem(init_meristem(nextgu, p.init_date))
          
  


Leaf(p):
  cttime = mthermaltime.get_effective_temperature(cdate)
  p.ttime += cttime
  
  p.area += growth_rate(p.ttime, p.finalarea, tip_leaf, b_leaf)*cttime
  
  produce Leaf(p)

Flower(t):
  if t < 30: produce Flower(t+1)
  else : produce Fruit


group 2:
consider: Internode, Meristem
Internode(p) >> []  x([Internode(pb)]) x([Meristem(pm)]) x(Internode(pa),1) :
  p.nbchildren = sum([pi.nbchildren for pi in pb])+sum([pi.nbchildren for pi in pa])+1
  
  if p.ttime < tip_internode*5:
    cttime = mthermaltime.get_effective_temperature(cdate)
    p.ttime += cttime
  
    p.length += growth_rate(p.ttime, p.finallength, tip_internode, b_internode)*cttime
    #p.width += growth_rate(p.ttime, InternodeRadius, tip_internode, b_internode)*cttime
  #else:
  p.width = radiusconstant * pow(p.nbchildren, radiusexponent)
  
  produce Internode(p)

group 0:
Internode(p) :
  if p.ttime < tip_internode*5:
    cttime = mthermaltime.get_effective_temperature(cdate)
    p.ttime += cttime
    
    p.length += growth_rate(p.ttime, p.finallength, tip_internode, b_internode)*cttime
  

group 3:

Leaf(p) --> %

Fruit --> %

interpretation:
group 0:

Internode(p) --> _(p.width) F(p.length)

Internode(pi) < Leaf(p) :
  if p.area > 0:
    width = sqrt(p.area / 1.4)
    length = 2 * width
    produce ,(10) f(pi.width) SetContour(leafsection) TextureVScale(1./length) _(width/2) F(length)


Flower(t) :
  nproduce [ F(3) ,(11) &(90) TextureScale(1) @o(5)]

Fruit :
  nproduce [ @v @h &(90) @Tp(0,0,-1) @Ts(0.1) ,(2) _(0.05) nF(1,0.1)  ,(3) f(1.5) @g(Revolution(applesection),3) ]

SimuInfo:
  produce [@2D @M(0.8,0.8) @L(str(cdate))]

endlsystem
###### INITIALISATION ######

__lpy_code_version__ = 1.1

def __initialiseContext__(context):
	import openalea.plantgl.all as pgl
	PGL_140198936196256 = pgl.ImageTexture("PGL_140198936196256" , "./apple-leaf.png" , )
	PGL_140198936196256.name = "PGL_140198936196256"
	Color_10 = pgl.Texture2D(image = PGL_140198936196256 , )
	Color_10.name = "Color_10"
	context.turtle.setMaterial(10,Color_10)
	PGL_140490263087120 = pgl.ImageTexture("PGL_140490263087120" , "./flower-small.png" , )
	PGL_140490263087120.name = "PGL_140490263087120"
	Color_11 = pgl.Texture2D(image = PGL_140490263087120 , )
	Color_11.name = "Color_11"
	context.turtle.setMaterial(11,Color_11)
	scalars = [('SEED', 'Integer', 63, 0, 100)]
	context["__scalars__"] = scalars
	for s in scalars:
		if not s[1] == "Category" : context[s[0]] = s[2]
	import openalea.plantgl.all as pgl
	leafsection = pgl.Polyline2D(	
	    pgl.Point2Array([(-1.01037, 0.524751),(-0.0030303, -0.00517379),(1.01037, 0.503186)]) , 
	    )
	leafsection.name = "leafsection"
	applesection = pgl.NurbsCurve2D(	
	    ctrlPointList = pgl.Point3Array([(-0.000874121, -0.389685, 1),(0.0162006, -0.606468, 1),(0.629545, -0.424825, 1),(0.712296, 0.0104895, 1),(0.645105, 0.516783, 1),(-0.00961528, 0.627098, 1),(-0.0171328, 0.394231, 1)]) , 
	    )
	applesection.name = "applesection"
	panel_0 = ({'name': 'Panel 1', 'active': True, 'visible': True},[('Curve2D',leafsection),('Curve2D',applesection)])
	parameterset = [panel_0,]
	context["__functions__"] = []
	context["__curves__"] = [('leafsection',leafsection),('applesection',applesection),]
	context["__parameterset__"] = parameterset
	context["leafsection"] = leafsection
	context["applesection"] = applesection
